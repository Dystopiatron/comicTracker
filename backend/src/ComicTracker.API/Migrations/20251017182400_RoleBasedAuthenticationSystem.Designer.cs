// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using comicTracker.Data;

#nullable disable

namespace comicTracker.Migrations
{
    [DbContext(typeof(ComicTrackerDbContext))]
    [Migration("20251017182400_RoleBasedAuthenticationSystem")]
    partial class RoleBasedAuthenticationSystem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("comicTracker.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "419703ff-e4d8-490d-bcfe-010f320d2ae6",
                            DateCreated = new DateTime(2025, 10, 17, 18, 23, 59, 888, DateTimeKind.Utc).AddTicks(8360),
                            Email = "demo@comictracker.com",
                            EmailConfirmed = true,
                            FirstName = "Demo",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO@COMICTRACKER.COM",
                            NormalizedUserName = "DEMOUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEOF9Cp3aHooy653pWoKGwRqGhq2sYImh+WvazWV4n6aqigW6BpfC8JMtixLLu07xDA==",
                            PhoneNumberConfirmed = false,
                            Role = "User",
                            SecurityStamp = "5080c7f9-a787-40f0-b445-3e67de5be4b6",
                            TwoFactorEnabled = false,
                            UserName = "demouser"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b8eeb08-6f5d-4568-922a-08085422b779",
                            DateCreated = new DateTime(2025, 10, 17, 18, 23, 59, 920, DateTimeKind.Utc).AddTicks(9600),
                            Email = "fan@comictracker.com",
                            EmailConfirmed = true,
                            FirstName = "Comic",
                            LastName = "Fan",
                            LockoutEnabled = false,
                            NormalizedEmail = "FAN@COMICTRACKER.COM",
                            NormalizedUserName = "COMICFAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHC8+FUaV05MyJkyw15HbZFdwFeeHd72pWSiIXAVO77gpf7NvZeO1NYYVsx2SMs/0w==",
                            PhoneNumberConfirmed = false,
                            Role = "Admin",
                            SecurityStamp = "d9b9becc-dfa2-4b51-9b5f-99b2dee5151e",
                            TwoFactorEnabled = false,
                            UserName = "comicfan"
                        });
                });

            modelBuilder.Entity("comicTracker.Models.Comic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CoverImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IssueNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Publisher")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SeriesName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Publisher");

                    b.HasIndex("SeriesName");

                    b.HasIndex("UserId");

                    b.ToTable("Comics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Condition = "NearMint",
                            DateAdded = new DateTime(2025, 9, 17, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2130),
                            IssueNumber = "#300",
                            Notes = "First appearance of Venom",
                            Publisher = "Marvel",
                            PurchasePrice = 25.00m,
                            SeriesName = "Amazing Spider-Man",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Condition = "VeryFine",
                            DateAdded = new DateTime(2025, 9, 22, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2130),
                            IssueNumber = "#1",
                            Notes = "Classic Batman issue",
                            Publisher = "DC",
                            PurchasePrice = 50.00m,
                            SeriesName = "Batman",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Condition = "Mint",
                            DateAdded = new DateTime(2025, 9, 27, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2140),
                            IssueNumber = "#1",
                            Notes = "First issue of the series",
                            Publisher = "Image",
                            PurchasePrice = 100.00m,
                            SeriesName = "The Walking Dead",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Condition = "Fine",
                            DateAdded = new DateTime(2025, 10, 2, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2140),
                            IssueNumber = "#1",
                            Notes = "First X-Men comic",
                            Publisher = "Marvel",
                            PurchasePrice = 75.00m,
                            SeriesName = "X-Men",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Condition = "Good",
                            DateAdded = new DateTime(2025, 10, 7, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2140),
                            IssueNumber = "#1",
                            Notes = "Man of Steel",
                            Publisher = "DC",
                            PurchasePrice = 60.00m,
                            SeriesName = "Superman",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            Condition = "VeryFine",
                            DateAdded = new DateTime(2025, 7, 9, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2140),
                            IssueNumber = "#300",
                            Notes = "Classic black suit issue",
                            Publisher = "Marvel",
                            PurchasePrice = 50.00m,
                            SeriesName = "Spider-Man",
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            Condition = "NearMint",
                            DateAdded = new DateTime(2025, 7, 14, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2150),
                            IssueNumber = "#1",
                            Notes = "Iconic Joker story",
                            Publisher = "DC",
                            PurchasePrice = 75.00m,
                            SeriesName = "Batman: The Killing Joke",
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            Condition = "Mint",
                            DateAdded = new DateTime(2025, 7, 19, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2150),
                            IssueNumber = "#1",
                            Notes = "First issue of acclaimed series",
                            Publisher = "Image",
                            PurchasePrice = 3.99m,
                            SeriesName = "Saga",
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            Condition = "Good",
                            DateAdded = new DateTime(2025, 7, 24, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2150),
                            IssueNumber = "#1",
                            Notes = "Seminal graphic novel",
                            Publisher = "DC",
                            PurchasePrice = 1.50m,
                            SeriesName = "Watchmen",
                            UserId = 2
                        },
                        new
                        {
                            Id = 10,
                            Condition = "Fine",
                            DateAdded = new DateTime(2025, 7, 29, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2150),
                            IssueNumber = "#1",
                            Notes = "First zombie apocalypse issue",
                            Publisher = "Image",
                            PurchasePrice = 2.95m,
                            SeriesName = "The Walking Dead",
                            UserId = 2
                        },
                        new
                        {
                            Id = 11,
                            Condition = "Good",
                            DateAdded = new DateTime(2025, 8, 3, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2150),
                            IssueNumber = "#141",
                            Notes = "Days of Future Past begins",
                            Publisher = "Marvel",
                            PurchasePrice = 0.60m,
                            SeriesName = "X-Men",
                            UserId = 2
                        },
                        new
                        {
                            Id = 12,
                            Condition = "Fine",
                            DateAdded = new DateTime(2025, 8, 8, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2150),
                            IssueNumber = "#1",
                            Notes = "Hellboy's first appearance",
                            Publisher = "Dark Horse",
                            PurchasePrice = 2.50m,
                            SeriesName = "Hellboy: Seed of Destruction",
                            UserId = 2
                        },
                        new
                        {
                            Id = 13,
                            Condition = "Good",
                            DateAdded = new DateTime(2025, 8, 13, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2160),
                            IssueNumber = "#1",
                            Notes = "First TMNT appearance",
                            Publisher = "Mirage Studios",
                            PurchasePrice = 1.50m,
                            SeriesName = "Teenage Mutant Ninja Turtles",
                            UserId = 2
                        },
                        new
                        {
                            Id = 14,
                            Condition = "VeryFine",
                            DateAdded = new DateTime(2025, 8, 18, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2160),
                            IssueNumber = "#1",
                            Notes = "Neil Gaiman masterpiece",
                            Publisher = "Vertigo",
                            PurchasePrice = 2.00m,
                            SeriesName = "Sandman",
                            UserId = 2
                        },
                        new
                        {
                            Id = 15,
                            Condition = "NearMint",
                            DateAdded = new DateTime(2025, 8, 23, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2160),
                            IssueNumber = "#1",
                            Notes = "Post-apocalyptic drama",
                            Publisher = "Vertigo",
                            PurchasePrice = 2.95m,
                            SeriesName = "Y: The Last Man",
                            UserId = 2
                        },
                        new
                        {
                            Id = 16,
                            Condition = "Good",
                            DateAdded = new DateTime(2025, 8, 28, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2160),
                            IssueNumber = "#1",
                            Notes = "Jeff Smith's epic fantasy",
                            Publisher = "Cartoon Books",
                            PurchasePrice = 1.95m,
                            SeriesName = "Bone",
                            UserId = 2
                        },
                        new
                        {
                            Id = 17,
                            Condition = "Good",
                            DateAdded = new DateTime(2025, 9, 2, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2160),
                            IssueNumber = "#1",
                            Notes = "Pulitzer Prize winner",
                            Publisher = "Pantheon Books",
                            PurchasePrice = 5.95m,
                            SeriesName = "Maus",
                            UserId = 2
                        },
                        new
                        {
                            Id = 18,
                            Condition = "Fine",
                            DateAdded = new DateTime(2025, 9, 7, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2170),
                            IssueNumber = "#1",
                            Notes = "Garth Ennis classic",
                            Publisher = "Vertigo",
                            PurchasePrice = 2.50m,
                            SeriesName = "Preacher",
                            UserId = 2
                        },
                        new
                        {
                            Id = 19,
                            Condition = "NearMint",
                            DateAdded = new DateTime(2025, 9, 12, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2170),
                            IssueNumber = "#1",
                            Notes = "Robert Kirkman superhero saga",
                            Publisher = "Image",
                            PurchasePrice = 2.95m,
                            SeriesName = "Invincible",
                            UserId = 2
                        },
                        new
                        {
                            Id = 20,
                            Condition = "Good",
                            DateAdded = new DateTime(2025, 9, 17, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2170),
                            IssueNumber = "#48",
                            Notes = "First Silver Surfer",
                            Publisher = "Marvel",
                            PurchasePrice = 0.12m,
                            SeriesName = "Fantastic Four",
                            UserId = 2
                        },
                        new
                        {
                            Id = 21,
                            Condition = "Good",
                            DateAdded = new DateTime(2025, 9, 22, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2170),
                            IssueNumber = "#1",
                            Notes = "Alan Moore dystopian tale",
                            Publisher = "Vertigo",
                            PurchasePrice = 1.95m,
                            SeriesName = "V for Vendetta",
                            UserId = 2
                        },
                        new
                        {
                            Id = 22,
                            Condition = "Fair",
                            DateAdded = new DateTime(2025, 9, 27, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2170),
                            IssueNumber = "#181",
                            Notes = "First Wolverine appearance",
                            Publisher = "Marvel",
                            PurchasePrice = 0.25m,
                            SeriesName = "The Incredible Hulk",
                            UserId = 2
                        },
                        new
                        {
                            Id = 23,
                            Condition = "VeryFine",
                            DateAdded = new DateTime(2025, 10, 2, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2170),
                            IssueNumber = "#1",
                            Notes = "Katsuhiro Otomo cyberpunk",
                            Publisher = "Marvel Epic",
                            PurchasePrice = 1.95m,
                            SeriesName = "Akira",
                            UserId = 2
                        },
                        new
                        {
                            Id = 24,
                            Condition = "NearMint",
                            DateAdded = new DateTime(2025, 10, 7, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2170),
                            IssueNumber = "#1",
                            Notes = "Todd McFarlane creation",
                            Publisher = "Image",
                            PurchasePrice = 1.95m,
                            SeriesName = "Spawn",
                            UserId = 2
                        },
                        new
                        {
                            Id = 25,
                            Condition = "Fine",
                            DateAdded = new DateTime(2025, 10, 12, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2180),
                            IssueNumber = "#1",
                            Notes = "Warren Ellis cyberpunk journalism",
                            Publisher = "Vertigo",
                            PurchasePrice = 2.50m,
                            SeriesName = "Transmetropolitan",
                            UserId = 2
                        },
                        new
                        {
                            Id = 26,
                            Condition = "Fine",
                            DateAdded = new DateTime(2025, 10, 13, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2300),
                            IssueNumber = "#2",
                            Notes = "On the Stump. Spider Jerusalem covers a political rally.",
                            Publisher = "Vertigo",
                            PurchasePrice = 2.50m,
                            SeriesName = "Transmetropolitan",
                            UserId = 2
                        },
                        new
                        {
                            Id = 27,
                            Condition = "Fine",
                            DateAdded = new DateTime(2025, 10, 14, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2300),
                            IssueNumber = "#3",
                            Notes = "Wild in the Country. Spider investigates cryogenic revivals.",
                            Publisher = "Vertigo",
                            PurchasePrice = 2.50m,
                            SeriesName = "Transmetropolitan",
                            UserId = 2
                        },
                        new
                        {
                            Id = 28,
                            Condition = "Fine",
                            DateAdded = new DateTime(2025, 10, 15, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2300),
                            IssueNumber = "#4",
                            Notes = "New City. Spider explores the city's underbelly.",
                            Publisher = "Vertigo",
                            PurchasePrice = 2.50m,
                            SeriesName = "Transmetropolitan",
                            UserId = 2
                        },
                        new
                        {
                            Id = 29,
                            Condition = "Fine",
                            DateAdded = new DateTime(2025, 10, 16, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2300),
                            IssueNumber = "#5",
                            Notes = "What Spider Watches on TV. Media criticism and satire.",
                            Publisher = "Vertigo",
                            PurchasePrice = 2.50m,
                            SeriesName = "Transmetropolitan",
                            UserId = 2
                        },
                        new
                        {
                            Id = 30,
                            Condition = "Fine",
                            DateAdded = new DateTime(2025, 10, 17, 18, 23, 59, 954, DateTimeKind.Utc).AddTicks(2300),
                            IssueNumber = "#6",
                            Notes = "God Riding Shotgun. Spider investigates new religious movements.",
                            Publisher = "Vertigo",
                            PurchasePrice = 2.50m,
                            SeriesName = "Transmetropolitan",
                            UserId = 2
                        },
                        new
                        {
                            Id = 31,
                            Condition = "Fine",
                            DateAdded = new DateTime(2025, 10, 17, 19, 23, 59, 954, DateTimeKind.Utc).AddTicks(2300),
                            IssueNumber = "#7",
                            Notes = "My Boyfriend is a Virus. Exploration of transhumanism.",
                            Publisher = "Vertigo",
                            PurchasePrice = 2.50m,
                            SeriesName = "Transmetropolitan",
                            UserId = 2
                        },
                        new
                        {
                            Id = 32,
                            Condition = "Fine",
                            DateAdded = new DateTime(2025, 10, 17, 20, 23, 59, 954, DateTimeKind.Utc).AddTicks(2310),
                            IssueNumber = "#8",
                            Notes = "Another Cold Morning. More on cryogenic revivals and societal change.",
                            Publisher = "Vertigo",
                            PurchasePrice = 2.50m,
                            SeriesName = "Transmetropolitan",
                            UserId = 2
                        },
                        new
                        {
                            Id = 33,
                            Condition = "Fine",
                            DateAdded = new DateTime(2025, 10, 17, 21, 23, 59, 954, DateTimeKind.Utc).AddTicks(2310),
                            IssueNumber = "#9",
                            Notes = "Party Time. Spider attends a political convention.",
                            Publisher = "Vertigo",
                            PurchasePrice = 2.50m,
                            SeriesName = "Transmetropolitan",
                            UserId = 2
                        },
                        new
                        {
                            Id = 34,
                            Condition = "Fine",
                            DateAdded = new DateTime(2025, 10, 17, 22, 23, 59, 954, DateTimeKind.Utc).AddTicks(2310),
                            IssueNumber = "#10",
                            Notes = "Freeze Me with Your Kiss. Exploration of future cryogenic technology.",
                            Publisher = "Vertigo",
                            PurchasePrice = 2.50m,
                            SeriesName = "Transmetropolitan",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("comicTracker.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("RevokedReason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Token");

                    b.HasIndex("UserId", "IsRevoked");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("comicTracker.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("comicTracker.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("comicTracker.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("comicTracker.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("comicTracker.Models.Comic", b =>
                {
                    b.HasOne("comicTracker.Models.ApplicationUser", "User")
                        .WithMany("Comics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("comicTracker.Models.RefreshToken", b =>
                {
                    b.HasOne("comicTracker.Models.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("comicTracker.Models.ApplicationUser", b =>
                {
                    b.Navigation("Comics");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
